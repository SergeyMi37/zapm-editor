ROUTINE %ZAPM.bs.BSCEXE
%BSCEXE ; Cache' Dos-Functions for %BS ; 15:50   02.11.2001
 ;
 ; Copyright (c) Serge W. Mikhaylenko
 ; All Rights Reserved
 ;
 Q
 ;The following table shows the $ZU(140) flags recognized by Cache:
 ;Flag Operation
 ;  1 Returns file size in bytes.
 ;  2 Returns modification date/time in $H format
 ;  3 Returns creation date/time in $H format
 ;  4 Tests whether the named file exists (returns 0 if yes)
 ;  5 Deletes the named file
 ;  6 Renames the file specified in name with the name specified in newname. May move the file
 ;      to a different location, if the host operating system supports it.
 ;  7 Returns file attributes as a bit map.
 ;  8 [unused]
 ;  9 Creates the directory specified in name.
 ;  10 Deletes the directory specified in name
FileListDir(DIR,OUT,MODE,MASK) //выходной массив @OUT
 N mask,IndexLoop K @OUT D FileList(DIR,OUT,MODE,$G(MASK)) Q
FileList(DIR,OUT,MODE,MASK) //ВЫДАТЬ СПИСОК ФАЙЛОВ В ДИРЕКТОРИИ. MASK="exe,jpg,bmp" --- РАБОТАЕТ В ВЕБЛИНКЕ
 N rs,X,N
 I $G(MASK)'="" S mask=","_MASK_","
 set rs=##Class(%ResultSet).%New("%File.FileSet")
 S X=rs.Execute(DIR,"*.*") I X'=1 S Error=-1 Q
 F  Q:'rs.Next()  S N=rs.Get("Name") D
 .I ".."'[$P(N,"\",$L(N,"\")) D
 ..I $G(mask)'="",mask'[(","_$ZCONVERT($P($P(N,"\",$L(N,"\")),".",2),"L")_",") Q
 ..I MODE=1 S @OUT@($P(N,"\",$L(N,"\")))=rs.Get("Type")_"?"_rs.Get("Size")_"?"_rs.Get("DateCreated")_"?"_rs.Get("DateModified")
 ..I MODE=2,rs.Get("Type")'="D" S IndexLoop=$G(IndexLoop)+1,@OUT@(IndexLoop)=N_"?"_rs.Get("Type")_"?"_rs.Get("Size")_"?"_rs.Get("DateCreated")_"?"_rs.Get("DateModified")
 .I rs.Get("Type")="D",".."'[$P(N,"\",$L(N,"\")) D FileList(N_"\",$S(MODE=1:$NA(@OUT@($P(N,"\",$L(N,"\")))),1:OUT),MODE,$G(MASK))
 Q
 //$zu(140,1,filename)
GetFileSize(file,size,mode)  //ПРОЧИТАТЬ ИЗ ФАЙЛА  --- РАБОТАЕТ В ВЕБЛИНКЕ, ЕСЛИ size МЕНЬШЕ 32К !!! ТОЛЬКО ТЕКСТОВЫЕ ФАЙЛЫ
 N str,f,ok,len
 set f=##class(%File).%New(file)
 set ok=f.Open($G(mode,"RU"))     if 'ok do f.%Close() Q "-2"  //do DecomposeStatus^%apiOBJ(ok,.err) write !,err(err),!
 ;set len=$zu(140,1,file) I len<size S size=len
 S str=f.Read(.size) if size=-1 do f.%Close() Q "-1"
 do f.%Close()
 Q str
FileCopy(S,T) //КОПИРОВАТЬ ФАЙЛ
 N K,MM S K=$$File2Arr^%ZAPM.bs.BSCEXE(S,.MM) I 'K Q K
 Q $$Arr2File^%ZAPM.bs.BSCEXE(.MM,T)
Arr2File(Mas,file)  //ПРОЧИТАТЬ ИЗ МАССИВА И ПОЛОЖИТЬ В ФАЙЛ
 N str,f,ok,len,I,size
 set f=##class(%File).%New(file)
 set ok=f.Open("WN"),len=0     if 'ok do f.%Close() Q $$Err(ok)
 S I="" F  S I=$O(Mas(I)) Q:I=""  D f.Write(Mas(I)) S len=len+$L(Mas(I))
 do f.%Close()
 Q len_" byte"
File2Arr(file,Mas)  //ПРОЧИТАТЬ ИЗ ФАЙЛА И ПОЛОЖИТЬ В МАССИВ
 N str,f,ok,len,I,size
 set f=##class(%File).%New(file)
 set ok=f.Open("RSU")     if 'ok do f.%Close() Q $$Err(ok)
 set len=$zu(140,1,file)
 F I=0:30000:len D
 .S size=30000 S Mas(I)=f.Read(.size)
 do f.%Close()
 Q len_" byte"
 ; Note : need "W" to write, "R" to read, "N" for new, "U" to read over crlf delims ,S - BINARY STREAM
Err(ok) do DecomposeStatus^%apiOBJ(ok,.err) Q err(err)
 Q
File2Arr1() s file="L:\_ZD\mpki-.txt"
 N str,f,ok,len,I,size
 set f=##class(%File).%New(file),co=0
 set ok=f.Open("RSU")     if 'ok do f.%Close() Q $$Err(ok)
 set len=$zu(140,1,file)
 F I=0:1000:len s co=co+1 D   ;i co>10 q
 .S size=1000 S ^tMTKI(co)=f.Read(.size) w !,co," "_$e(^tMTKI(co),1,67)_".."
 do f.%Close()
 Q len_" byte"
GetFileC(file,flag)  //ВОЗВРАТИТЬ СОДЕРЖАНИЕ ФАЙЛА  --- РАБОТАЕТ В ВЕБЛИНКЕ, ЕСЛИ РАЗМЕР ФАЙЛА МЕНЬШЕ 32К
 N str,f,ok,len
 set f=##class(%File).%New(file)
 IF $D(flag) G GetFileCC
 set ok=f.Open("RU")     if 'ok do f.%Close() Q "-2"
 set len=$zu(140,1,file)
 S str=f.Read(.len) if len=-1 do f.%Close() Q "-1"
GetFileCE do f.%Close()
 Q str
GetFileCC K flag
 set ok=f.Open("R") if 'ok do f.%Close() Q "-2"
 F str=1:1 S len=32000,flag(str)=f.Read(.len) I len=-1 Q
 G GetFileCE
GetFile(file,ASCII) //ВОЗВРАТИТЬ СОДЕРЖАНИЕ ТЕКСТОВОГО ФАЙЛА  --- НЕ РАБОТАЕТ В ВЕБЛИНКЕ
  n a,s,x,S1,S2
  s $zt="GetFile1",s="",(S1,S2)="" I $D(ASCII) D INIT^%ZAPM.bs.BSre(ASCII)
  o file:"r":0 i '$t g GetFile1
  u file F  r a s s=s_$c(13,10)_$TR(a,S1,S2) ;u 0 w a,!
GetFile1 c file
 Q s
WINDOWS() Q "NT"
dir(dir,file) N w,a,s
 S w=$$command("d:\!\SHOW.BAT "_dir_" "_file)
  s $zt="dir1",s=""
  o file:"r":0 i '$t g dir1
  u file F  r a s s=s_$c(13,10)_a
  q
command(exec) ; Output directory listing
  n file,a,s,x
  s file=$$exec(exec,1)
  s $zt="dir1",s="" D INIT^%ZAPM.bs.BSre(0)
  o file:"r":0 i '$t g dir1
  u file F  r a s s=s_$c(13,10)_$TR(a,S1,S2) ;u 0 w a,!
dir1 c file
  d del(file)
  ;l -^%dosfile
dirq q s
 
del(D) i $$DelFile(D)
 Q
DelFile(D) ;Удаление файла
 N A S A=$ZU(140,5,D) I A=0 Q 1
 q A
 
files(spec) ; Return list of files that match pattern
  n (spec)
  s spec=$g(spec),Win=$$WINDOWS
  i Win="Win95" s exec="dir "_spec_" /v /a"
  e  i Win="NT" s exec="dir "_spec_" /x"
  e  s exec="dir "_spec_" /v /a"
  s file=$$exec(exec,1)
  s $zt="files1"
  o file:"r":0 i '$t g files1
  s str=""
  i Win="Win95" DO  ; --- Windows 95 Specific "DIR" Output ---
  . f  d
  .. u file r a
  .. i $e(a,1)=" "!(($e(a,9)'=" ")&($e(a,9)'=".")) q
  .. s pre=$tr($e(a,1,8)," ")                ; 8.2 DOS file name
  .. s suf=$tr($e(a,10,12)," ")
  .. s dosnam=pre
  .. i pre'["."&(suf'="") s dosnam=dosnam_"."
  .. s dosnam=dosnam_suf
  .. s a=$e(a,13,$l(a))
  .. d lspc                                  ; No leading spaces
  .. s f=$f(a," ")                           ; Find next space
  .. s size=$e(a,1,f-2),size=+$tr(size,",.") ; Actual size (no punctuation)
  .. s a=$e(a,f-1,$l(a))
  .. d lspc
  .. s f=$f(a," ")                          ; Skip allocated size
  .. s a=$e(a,f-1,$l(a))
  .. d lspc
  .. s f=$f(a," ")
  .. s dat=$e(a,1,f-2)                       ; 'Modified' date
  .. s a=$e(a,f-1,$l(a))
  .. s yy=$p(dat,"-",3)
  .. s mm=$p(dat,"-",2)
  .. s dd=$p(dat,"-",1)
  .. i yy>70 s yy=19_yy
  .. s dat=yy_"-"_mm_"-"_dd
  .. d lspc
  .. s f=$f(a," ")
  .. s tim=$e(a,1,f-2)                       ; 'Modified' time
  .. s a=$e(a,f-1,$l(a))
  .. s hh=+tim,mm=$p(tim,":",2)
  .. i mm["p" s hh=hh+$s(hh=12:0,1:12)
  .. i mm["a",hh=12 s hh=0
  .. s mm=$e(100+mm,2,3),hh=$e(hh+100,2,3)
  .. s tim=hh_":"_mm
  .. d lspc
  .. s f=$f(a," ")                           ; Skip Accessed date
  .. s a=$e(a,f-1,$l(a))
  .. s attr=$e(a,1,8),a=$e(a,9,$l(a))
  .. s attr=$zcvt(attr,"l"),attr=$tr(attr," ")
  .. d lspc
  .. s name=a                                ; 'Real' file name
  .. s str=str_dosnam_";"_attr_";"_size_";"_dat_";"_tim_";"_name_$c(10)
  e  DO  ; --- DEFAULT: Windows NT Specific "DIR" Output ---
  . f  d
  .. u file r a
  .. i $e(a,1)=" "!(($e(a,9)'=" ")&($e(a,3)'="/")) q
  .. s f=$f(a," ")
  .. s dat=$e(a,1,f-2)                       ; 'Modified' date
  .. s a=$e(a,f-1,$l(a))
  .. s mm=$p(dat,"/",1)
  .. s dd=$p(dat,"/",2)
  .. s yy=$p(dat,"/",3)
  .. i yy>70 s yy=19_yy
  .. s dat=yy_"-"_mm_"-"_dd
  .. d lspc
  .. s f=$f(a," ")
  .. s tim=$e(a,1,f-2)                       ; 'Modified' time
  .. s a=$e(a,f-1,$l(a))
  .. s hh=+tim,mm=$p(tim,":",2)
  .. i mm["p" s hh=hh+$s(hh=12:0,1:12)
  .. i mm["a",hh=12 s hh=0
  .. s mm=$e(100+mm,2,3),hh=$e(hh+100,2,3)
  .. s tim=hh_":"_mm
  .. d lspc
  .. i $e(a)="<" DO  ; Handle '<DIR>' stuff...
  ... s f=$f(a," ")                           ; Ignore '<DIR>'
  ... s attr=$e(a,1,f-2)
  ... s a=$e(a,f-1,$l(a))
  ... s attr="d"
  ... d lspc
  .. e  s attr=""
  .. s f=$f(a," ")                           ; Find next space
  .. i a'="",'f s size=a
  .. e  s size=$e(a,1,f-2)
  .. i 'f s (dosnam,name)=$s(size=".":$zcvt($p(spec,"\",$l(spec,"\")),"u"),1:size),size="",str=str_dosnam_";"_attr_";"_size_";"_dat_";"_tim_";"_name_$c(10) QUIT
  .. s size=+$tr(size,",.") ; Actual size (no punctuation)
  .. s a=$e(a,f-1,$l(a))
  .. d lspc
  .. s pre=$p($p(a,".",1)," ")                ; 8.2 DOS file name
  .. s suf=$p($p(a,".",2)," ")
  .. s dosnam=pre
  .. i pre'["."&(suf'="") s dosnam=dosnam_"."
  .. s dosnam=dosnam_suf
  .. s a=$e(a,f-1,$l(a))
  .. d lspc                                  ; No leading spaces
  .. s name=$s(a="":dosnam,1:a)              ; 'Real' file name
  .. s str=str_dosnam_";"_attr_";"_size_";"_dat_";"_tim_";"_name_$c(10)
files1  c file
  d del(file)
  ;l -^%dosfile
filesq  q str
 
size(D) ; Get size of single file (-1 indicates failure)
 N A S A=$ZU(140,1,D)
 Q A
volspace(spec) ; Get space left on drive
  n (spec)
  s spec=$g(spec),Win=$$WINDOWS
  i spec?1a s spec=spec_":"
  i Win="Win95" s exec="dir "_spec_"\"
  e  i Win="NT" s exec="dir "_$$curdrive()_":\"
  e  s exec="dir "_spec_"\"
  s file=$$exec(exec,1)
  s $zt="volspace1"
  o file:"r":0 i '$t g volspace1
  s b="" f i=1:1 s a=b u file r b
volspace1 ;
  c file
  d del(file)
  ;l -^%dosfile
  s a=b
  d lspc
  i Win="Win95" DO  ; --- Windows 95 Specific "DIR" Output ---
  . s f=$f(a," "),a=$e(a,f,$l(a))
  . s f=$f(a," "),a=$e(a,f-1,$l(a))
  . d lspc
  . s a=$p(a," ",1)
  e  DO  ; --- DEFAULT: Windows NT Specific "DIR" Output ---
  . s a=$p(a," ")
volspaceq q $tr(a,",.")
 
CurDisk() Q $$curdrive()
curdrive() ; Get current drive
  n file,i,a,Win
  s file="dir",Win=$$WINDOWS
  s $zt="curdrive1"
  o file:"rq":0 i '$t g curdrive1
  i Win="Win95" u file r a,a
  e  i Win="NT" u file r a
  e  u file r a,a
curdrive1 c file
curdriveq q $p(a," ",5)
 
GCDir(D) q $$ANSI^%ZAPM.bs.BSre($$subdir(D))
subdir(spec) ; Get current directory
  n (spec)
  s spec=$g(spec)
  i spec="" s spec=$$curdrive()
  i spec?1a s spec=spec_":"
  s file="dir "_spec
  s $zt="subdir1"
  o file:"rq":0 i '$t g subdir1
  u file r a,a,a,a
subdir1  c file
  s dir=$p(a," ",4)
  s dir=$p(dir,"\",2,$l(dir,"\"))
  i dir="" s dir="\"
subdirq  q dir
 
verify(spec) ; Check/Set verification of file copy
  n (spec)
  s spec=$g(spec)
  s spec=$zcvt(spec,"l")
  s flag=0 i spec'="on"&(spec'="off")&(spec'="") s spec="",flag=1
  i spec'="" s exec="verify "_spec d exec(exec,0) q
  s exec="verify"
  s file=$$exec(exec,1)
  s $zt="verify1"
  o file:"r":0 i '$t g verify1
  u file r a
verify1  c file
  d del(file)
  ;l -^%dosfile
  i flag w a,! q
verifyq  q a
 
copy(source,target) ; Copy files
  n (source,target)
  s source=$g(source),target=$g(target)
  i source=""!(target="") q
  s exec="copy "_source_" "_target
  d exec(exec,0)
copyq  q
 
RenFile(S,D) ; Rename files
 N A S A=$ZU(140,6,S,D) I A=0 Q 1
 Q 0
CNDir(D) ; Make a directory
 N A S A=$ZU(140,9,D) I A=0 Q 1
 Q 0
DelDir(D) ; Удалить пустую директорию
 N A S A=$ZU(140,10,D) I A=0 Q 1
 Q 0
type(spec) ; Type a file
  n (spec)
  s spec=$g(spec)
  i spec="" q
  s $zt="type1"
  o spec:"r":0 i '$t q
  f  u spec r a u 0 w a,!
type1  c spec
typeq  q
 
var(spec) ; DOS variables
  n exec,file,str,a,flag
  s spec=$g(spec)
  s exec="set"
  s file=$$exec(exec,1)
  s $zt="var1"
  o file:"r":0 i '$t g var1
  s str="",flag=0
  f  u file r a s str=str_a_$c(0) i $zcvt($p(a,"=",1),"l")=$zcvt(spec,"l")
  s str=$p(a,"=",2,999),flag=1 q
var1  c file
  d del(file)
  i spec'=""&('flag) s str=""
varq  q str
exists(file) ; Check to see if a file exists and return 0 or 1
  I $ZU(140,4,file)=0 Q 1
  Q 0
 ;Set Current Drive
SCDrive(D) Q "РЕЖИМ ПОКА НЕ ЭМУЛИРОВАН"
 Q
 ;Set File Attributes
SetAtr(F) Q "РЕЖИМ ПОКА НЕ ЭМУЛИРОВАН"
 Q
 ;Change Current Directory
CCDir(D) Q "РЕЖИМ ПОКА НЕ ЭМУЛИРОВАН"
 Q
 ;Get Drive Parameters
GetDPar(D) Q "РЕЖИМ ПОКА НЕ ЭМУЛИРОВАН"
 Q
 ;Get File Attributes
FileAtr(F,M) //Атрибуты ФАЙЛА
 I M=1 q $ZU(140,1,F) //- РАЗМЕР ФАЙЛА
 I M=2 q $ZD($P($ZU(140,2,F),",",1),3) //- ДАТА   $ZT($P(H,",",2),1)_" "_$ZD(H,3)
 I M=3 q $ZT($P($ZU(140,2,F),",",2),1) //- ВРЕМЯ
 Q ""
GetAtr(File)  //Атрибуты ФАЙЛА
 q $ZU(140,7,File)
 ;Существует ли файл
ExsFile(D) Q $$exists(D)
 Q
BegDir(D,V) ;Begin Directory Search 12 !!
 Q "" ;I $ZV["MSM" Q $ZOS(12,D,V)
SearFile(D,V) Q "РЕЖИМ ПОКА НЕ ЭМУЛИРОВАН"
 Q ""
 ;Continue Directory Search
ContDir(D) Q "РЕЖИМ ПОКА НЕ ЭМУЛИРОВАН"
 Q
Ver() N S1,S2 Q $$ANSI^%ZAPM.bs.BSre($$version)  ;Get MS-DOS Version Number
version() ; Get DOS Version
  n a,file
  s file="ver"
  s $zt="version1"
  o file:"rq":0 i '$t g version1
  u file r a,a
version1 c file
  d del(file)
versionq q a
 
EXE(EXE) I $zf(-1,EXE)
 Q
SysVer() N F,S //ПОЛУЧИТЬ ВЕРСИЮ ОПЕРАЦИОННОЙ СИСТЕМЫ
 I $ZV["Linu" S F="uname -a"
 E  S F="ver"
 S F=$$exec(F,1)
 S S=$TR($$GetFileSize(F,32000),$C(13,10))
 D del(F)
 Q $$ANSI^%ZAPM.bs.BSre(S)
exec(exec,out) ; Executable string
  i out d  q file
  .;l +^%dosfile
  . s file=$$TEMPDIR^%ZAPM.bs.BSCF1_"BS"_$TR($G(%BS(3),$P),":|,","")_$J_".tmp"
  . s x=$zf(-1,exec_" > "_file)
  i 'out d
  . s x=$zf(-1,exec)
execq q
lspc  ; Strip leading spaces
  i $e(a,1)=" " s a=$e(a,2,$l(a)) g lspc
lspcq  q
 ////////////////////////////////////////////////////////////////
 
 
test0 //пример нового доступа к внешней таблицы ODBC
 
 
 ////////////////////////////////////////////////////////////////
 S dsn="NuSphere"
 s BSUsEr="root"
 S BSPsWrD=""
 S sql="SELECT * FROM e107_user"
 //S IF="1 S Break=(ii>1)"
 s TG="^sss"
 d Read(dsn,sql,$G(IF),,TG) ;НОВЫЙ БОЛЕЕ ПРАВИЛЬНЫЙ АНАЛОГ D Read^%ZAPM.bs.BSCG
 I $D(Errors) W !,Errors ;ПОСМОТРЕТЬ ОШИБКИ
 I $G(TG)'="" D ^%ZAPM.bs.BSMSMG(TG) ;ВОЙТИ В РЕДАКТОР МАССИВОВ
 q
test1 M MM=^sss(4,1) D STR2MAS^%ZAPM.bs.BSCmail(.MM,.MMM,$C(13,10)) K ^ss M ^ss=MMM
	Q
test2 K MM M MM=^sss(4,1) D Arr2File^%ZAPM.bs.BSCEXE(.MM,"N:\1")
	Q
Read(DSN,SQL,IF,ErV,TG) ;ЧТЕНИЕ ТАБЛИЦЫ В МАССИВ TG
ReadInt	d ReadSql(DSN,$G(BSUsEr),$G(BSPsWrD),SQL,TG,IF,$G(ErV))
	q
ReadSql(dsn,login,pswd,sql,vcol,IF,ErV) ;ЧТЕНИЕ ТАБЛИЦЫ В МАССИВ TG
 n stmt,con,sc,ncols,i,ii,idRec,v,ColsInfo,Break
 //код для совместимости со старыми программами
 i $G(ErV)'=0 S ErV=1  // ErV=1 ;ВСЕ СООБЩЕНИЯ БУДУТ НАХОДИТСЯ В ПЕРЕМЕННОЙ Errors
 K Errors
 S $ZT="Dis"
 I $G(vcol)'="" K @vcol S @vcol@(-1)=sql
 I $G(IF)'="" I $G(vcol)'="" S @vcol@(-2)=IF
 //
 S con=##Class(%SQLGatewayConnection).%New()
 S sc=con.Connect(dsn,login,pswd)
 s sc=con.AllocateStatement(.stmt)
 I +sc'=1 d Er g Dis
 S sc=con.Prepare(stmt,sql)
 I +sc'=1 d Er g Dis
 S sc=con.Execute(stmt)
 S sc=con.DescribeColumns(stmt,.ColsInfo)
 S ncols=$LI($LI(ColsInfo,1),1)
 ;W "ncols=",ncols,! //количество колонок
 I ncols<1  d Er g Dis
 d hdr
 S ii=0  //счетчик записей
 for  {
	s sc=con.Fetch(stmt)
	I +sc'=1 Q  //дошли до конца
	S ii=ii+1
	for i=1:1:ncols S v="" S sc=con.GetData(stmt,i,1,.v) d
	.s @vcol@(ii,i)=$e(v,1,31743) i $l(v)>31743 D
	..f i1=1:1 q:$e(v,31743)=""  S sc=con.GetData(stmt,i,1,.v) s @vcol@(ii,i,i1)=$e(v,1,31743)
	i $G(IF)'="" x "I "_IF //логика внутри цикла
	I $G(Break) Q  //прерывание перебора - Break создался внутри IF
 }
Dis D con.Disconnect()
 Q
Er do DecomposeStatus^%apiOBJ(sc,.Errors) i $g(ErV)'=1 zw Errors
 q
hdr //информация по полям и заголовке БД
 ;S w(1)=10,w(2)=9,w(3)=11,w(4)=8,w(5)=5,w(6)=12,w(7)=11,w(8)=4
 ;S x(1)=0 for i=2:1:8 S x(i)=x(i-1)+w(i-1) 
 ;W ?x(1),"Name" 
 ;W ?x(2),"SQL type" 
 ;W ?x(3),"Size"
 ;W ?x(4),"Dec dig"
 ;W ?x(5),"Null" 
 ;W ?x(6),"Datype"
 ;W ?x(7),"Dis sz" 
 ;W ?x(8),"Currency",!
 for i=1:1:ncols {
   S ColInfo=$LI(ColsInfo,i+1)
   s @vcol@(0,i)=$LI(ColInfo,1)
   ;for i1=1:1:7 W ?x(i1),$LI(ColInfo,i1)
 }	 
 Q
 
%GOF(IO,glovec,desc) //OUT
 N IOT,IOPAR          ;S IO="C:\FILENAME.GOF",
 S IOT="RMS",IOPAR="" ;,glovec("%A")="",glovec("%B")="",desc="description"
 Q $$entry^%GOF(.glovec,desc) ;W !,"Globals exported successfully" Q
 
%GIF(IO) ;IN
 ;S IO="C:\FILENAME.GOF"
 N IOT S IOT="RMS" 
 Q $$entry^%GIF() ;W !,"Globals imported successfully" Q
 
ASYS4 ;Кривошеев С.А.;Системные процедуры и функции;;[ 23/10/2003 8:54 ]
Ri(File,Typ)                           ; * Импорт программ *
 N case
 ; File  - имя файла
 ; Fetch - строка шаблон
 s Typ=$g(Typ,"Cache")
 s File=File_":(""RU"")"
 S case=$$rload^%Wr(File,Typ,0,2,1,0,0,0)
 Q case
Ro(File,Name,Type,Descrip)             ; * Экспорт программ *
 N case,type,name
 ; File    - имя файла
 ; Name    - имя переменной со списком программ @Name@(i)="rtn.INT"
 ; Type    - тип программ INT, MAC, OBJ
 ; Descrip - коментарий
 S Name=$G(Name)
 S Type=$G(Type,"INT")
 S Descrip=$G(Descrip)
 S name=$NA(^%utility($J))
 I Name'="" K @name M @name=@Name
 S type="Cache"
 S:Type="OBJ" type="Object"
 S case=$$rsave^%Wr(Type,File_":(""NW"")",Descrip,type,0,0,1)
 Q case
FetchR(Fetch,Name,Type)                ; * Выбрать программы по шаблону *
 N case,name,nam,i
 ; Fetch - Строка шаблон "rtn,a*,'ab,'ac"
 ; Name  - имя переменной результата
 ; Type  - переделывать результат в @Name@(i)=rtn или оставить @Name@(rtn)=""
 S Fetch=$G(Fetch,"*")
 S Name=$G(Name)
 S Type=$G(Type,1)
 K:Name'="" @Name
 S name=$NA(^%utility($J))
 K @name
 S case=$$rsel^%Wr(Fetch)
 Q:'case 0
 I Type=0 M:Name'="" @Name=@name K:Name'="" @name Q case
 S:Name="" Name=name
 S nam=""
 F  S nam=$O(@name@(nam)) Q:(nam="")!(+nam=nam)  S @Name@($I(i))=nam K @name@(nam)
 K:Name'=name @name
 Q case
Gi(File,Fetch,Scr)                     ; * Импорт глобалов тип 5 Cache *
 N case,name,IO
 ; File  - имя файла
 ; Fetch - строка шаблон "^glb"_$C(13,10)_"^tmp*"
 ; Scr   - вывод на экран
 S Fetch=$G(Fetch,"*")
 S Scr=$G(Scr,0)
 S IO=Scr
 S case=$$main^%Wgr(File_":(""VR"")",5,Fetch,0,0,0)
 Q case
Go(File,Name,Rm,Scr)                   ; * Экспорт глобала тип 5 Cache *
 N case,name,IO,RM
 ; File  - имя файла
 ; Name  - имя переменной со списком глобалов @Name@(i)="^tmp(1,2"
 ; Rm    - 
 ; Scr   - вывод на экран
 S Name=$G(Name)
 S Rm=$G(Rm,80)
 S Scr=$G(Scr,0)
 S name=$NA(^%utility($J))
 M:Name'="" @name=@Name
 S IO=Scr
 S RM=Rm
 S case=$$main^%Wgs(File_":(""VNW"")",5,"",0,0)
 Q case
Gif(File,Del,Fetch,Name,Scr)           ; * Импорт глобалов тип 7 Cache Block *
 N case,name,IO
 ; File  - имя файла
 ; Del   - удалять глобалы
 ; Fetch - строка шаблон "^glb"_$C(13,10)_"^tmp*"
 ; Name  - имя переменной со списком глобалов @Name@("glb")=""
 ; Scr   - вывод на экран
 S Fetch=$G(Fetch,"*")
 S Name=$G(Name)
 S Scr=$G(Scr,0)
 S Del=$G(Del,1)
 S name=$NA(^%utility($J))
 S IO=Scr
 D Gif1
 Q:case=0 0
 D:Del Gif2
 S case=$$main^%Wgr(File_":(""RU"")",7,Fetch,0,0,0)
 Q case
Gif2                                   ; удаление глобалов
 N var,nam
 S var=""
 F  S nam=$O(@name@(var)) Q:var=""  S nam="^"_var K @nam
 Q
Gif1                                   ; прочитать заголовок из файла
 N i,r
 S case=$$header^%Wgr(File_":(""UR"")",7,0)
 Q:case=0
 I Name'="" Q:Name=1  K @name M @name=@Name Q
 S case=$P(case,$C(22,35,1),2)
 K @name
 S r=$C(19,94,1)
 F i=1:1:$L(case,r)-1 S @name@($P(case,r,i))=""
 Q
Gof(File,Comment,Name,Scr)             ; * Экспорт глобалов тип 7 Cache Block *
 N case,name,IO
 ; File    - имя файла
 ; Comment - строка коментария к данным
 ; Name    - имя переменной со списком глобалов @Name@(i)="^glb"
 ; Scr     - вывод на экран
 S Comment=$G(Comment)
 S Name=$G(Name)
 S Scr=$G(Scr,0)
 S name=$NA(^%utility($J))
 M:Name'="" @name=@Name
 S IO=Scr
 S case=$$main^%Wgs(File_":(""WNU"")",7,Comment,0,0)
 Q case
GoMSM(Fetch,File,Scr)                  ; * Экспорт глобалов в формате %GS MSM *
 n ok,name,glb,i
 s Scr=$g(Scr,1)
 s File=$$FOpen^ASYS(File)
 i File="" q:$q 0 q
 s ok=$$FetchG(Fetch)
 i 'ok q:$q 0 q
 S name=$NA(^%utility($J))
 w:Scr !,"Запись глобалов",!
 d BEGTXT
 s i=0
 s glb=""
 f  s glb=$o(@name@(glb)) q:glb=""  d NEWGLB
 d END("**")
 c File
 w !,"Запись завершена! Записан(о) ",i," глобал(а)"
 q:$q 1
 q
BEGTXT                                 ; Начальный текст
 n txt
 s txt=$$Time^zfunc()_" "_$$Date^zfunc()_" OOO NTC Air, 2003"
 d USE^ASYS3(File)
 w txt,!
 w "",!
 d USE^ASYS3()
 q
NEWGLB                                 ; Очередной глобал
 n uz,val
 s i=i+1
 s uz=@name@(glb)
 w $$PadR^zfunc(uz,10)
 s val=$d(@uz)
 i (val=1)!(val=11) d W(uz)
 f  s uz=$q(@uz) q:uz=""  d W(uz)
 d END("*")
 q
END(Txt)                               ; Записать концовку
 d USE^ASYS3(File)
 w Txt,!
 w Txt,!
 d USE^ASYS3()
 q
W(Name)                                ; Запись узла
 d USE^ASYS3(File)
 w Name,!
 w @Name,!
 d USE^ASYS3()
 q
FetchG(Fetch,Name,Type)                ; * Выбрать глобалы по шаблону *
 N count,name,i,nam
 ; Fetch - Строка шаблон "glb;a*;'ab;'ac"
 ; Name  - имя переменной результата
 ; Type  - переделывать результат в @Name@(i)=glb или оставить @Name@(glb)=""
 S Fetch=$G(Fetch,"*")
 S Name=$G(Name)
 S Type=$G(Type,1)
 K:Name'="" @Name
 S name=$NA(^%utility($J))
 K @name
 S count=$$Fetch^%GD(Fetch,1,0)
 I $I=2 K ^%utility("SPOOL")
 Q:'count 0
 I Type=0 M:Name'="" @Name=@name K:Name'="" @name Q count
 S:Name="" Name=name
 S nam=""
 F  S nam=$O(@name@(nam)) Q:(nam="")!(+nam=nam)  S:$D(@nam) @Name@($I(i))=nam K @name@(nam)
 K:Name'=name @name
 Q count 
 //----------------------------
 /*Сначала насчет хелпа :)
Все системные утилитки ^%W* являются недокументированными и НЕ
предназначены для прямого использования (писаны они как ответная часть
виндовых утилит) Но так как до 5-й версии нет (или я не нашел)
системных утилит для использования из под программ на COS (%RI и %RO
не считаются - т.к. они сугубо интерактивные), то приходится
разбираться с исходниками ^%W* и огромное спасибо ИнтерСистемз за то
что они оставили их открытыми!
Собственно эти исходники и являются единственным ХЕЛПОМ для меня :)
 
Теперь насчет импорта:
Есть аналогичная точка входа в ^%Wr
но с ней НЕ так все просто так как нет возможности в программе
получить список возникших ошибок при компиляции загружаемых программ!
Ее можно только заставить вывалить уведомления на текущее устройство
но для использования в программе сие не годится!
На всякий случай все таки приведу мое описание этой функции:
 
(Всё IMHO)
 
$$rload^%Wr(file,format,selection,over,compile,syntax,backup,showstat,langmode,pasting)
где:
file - по аналогии с rsave: "диск:/путь/файл:(""RS"")" (вместо RS в
       принципе м.б. другие параметры открытия файла)
format - Формат импорта ("Cache","DTM","DSM","Object","ISM","MSM",и.т.д)
selection - 0-все проги из файла
            1-поименным списком (список в ^%utility($j,Имя,Тип)=""
                                 где Имя - имя программы
                                     Тип - "INT","MAC","BAS" и т.д.)
            2-по списку масок   (список в ^%utility($j,Тип,i)=маска
                                 где Тип - "INT","MAC","BAS" и т.д.
                                     i - 1,2,3,...
                                     маска - "=имя" - эквивалентность
                                             "?шаблон" - соотв.М-шаблону
                                             "имя1:имя2" - диапазон)
over - 0 - не перезаписывать существующие
       1 - делать запрос на перезапись (не подходит !!!)
       2 - всегда перезаписывать существующие
compile - 0 - не компилировать а только загрузить тексты
          1 - компилировать при загрузке
syntax - ??? не используется ???
backup - 1 - создавать резервную копию
         0 - не создавать
showstat - 1 - показывать ход выполнения (write на $p -устройство)
           0 - не показывать ход выполнения
langmode - Языковый режим компиляции:("Cache","DSM-11","DTM","Ipsum","Cobra","DSM-VMS","MSM" и т.д.)
pasting - 0 !
 
 
Ну и типа пример: :-)
 s x=$$rload^%Wr("e:/cache5/viewsc.rsa:(""RS"")","Cache",0,2,1,0,0,0,"Cache")
 
 */
 
