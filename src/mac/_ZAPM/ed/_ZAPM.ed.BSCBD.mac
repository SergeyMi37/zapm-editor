ROUTINE %ZAPM.ed.BSCBD
%BSCBD ;Генератор классов для ТаблицОписанияБазДанных %BS ; 18:26   06.04.2003
 ;
 ; Copyright (c) Serge W. Mikhaylenko
 ; All Rights Reserved
 ;
 Q
LD(D) D LoadDir^%apiOBJ(D,"cru",.ErroR) ;ЗАГРУЗИТЬ КЛАССЫ ИЗ ДИРЕКТОРИИ
 q
LF(D) D LoadFile^%apiOBJ(D,"cru",.ErroR) ;ЗАГРУЗИТЬ КЛАССЫ ИЗ CDL
 ;do DecomposeStatus^%apiOBJ(status,.err) write !,err(err),!
 Q
ALL(UCI) ;КОМПИЛИРОВАТЬ ВСЕ РАЗДЕЛЫ И КОДИФИКАТОРЫ
 N PxPUSTO
 I $G(UCI)="" G ALLP
 I $ZU(5)'=UCI,$$ZU^%ZAPM.ed.BSF4(UCI)
 I $ZU(5)'=UCI Q "No found "_UCI
 S PxPUSTO=""
ALLP N GL S GL="" F  S GL=$O(^$GLOBAL(GL)) Q:GL=""  D
 .I $E($G(@GL),1,9)="BaSe MsW ",($E(GL,1,5)="^%ZAPM.ed.BSC"!($E(GL,1,4)="^%ZAPM.ed.BSS")) W !,"partition ",GL D ALLPART(GL) Q
 .D kdf^%ZAPM.ed.BSCKD(GL)
 Q 1
ALLPART(PART) ;КОМПИЛИРОВАТЬ ВЕСЬ РАЗДЕЛ
 S PP="" F  S PP=$O(@PART@(PP)) Q:PP=""  D
 .I $P(@PART@(PP),"@",17)=2 W !,$$START($NA(@PART@(PP)),1) ;БАЗА ДАННЫХ
 Q
START(TOBD,COMPILE,NC,DIR) ;
 N FN,K,S,I,J,P,SS,BD,CBD,BSK,P3,SUBK,OK
 I '$D(@TOBD) S ErroR="1,Undefine TOBD" Q ErroR
 I $G(DIR)="" S DIR=$$TEMPDIR^%ZAPM.ed.BSCF1
 I $D(NOKILLER),NOKILLER[":\" S DIR=NOKILLER
 I $P(@TOBD,"@",17)'=2 S ErroR="1,This no BD" Q ErroR
 D Copy^%ZAPM.ed.BSF8($NA(@TOBD@("KEY")),"K")
 S BD=$P(K,"@",1) ;ИМЯ БАЗЫ ДАННЫХ
 I $G(NC)="" S NC=$TR(TOBD,"(]%[)""^","..") S NC=$P(NC,".",1,$L(NC,".")-1)_"."_$S($E($P(NC,".",$L(NC,".")),1)?1N:"B",1:"")_$P(NC,".",$L(NC,"."))
 ;W NC Q
 S FN=DIR_NC_".CDL"
 I '$$OpenFile^%ZAPM.ed.BSCF1(FN,"W") S ErroR="1,No access to file "_FN Q ErroR
 U FN
 D TITLE W "class ",NC,!,"{",!
 D SUPER,KEYS I $D(@TOBD@("Metod")) S I="" F  S I=$O(@TOBD@("Metod",I)) Q:I=""  D METOD($G(@TOBD@("Metod",I)),I)
 D METOD("NameKey()",,"Q "_$D(K(0))) I '$G(NOqListBD) D QUERY
 D STORAGE
 W !,"}",!
 C FN
 I $G(COMPILE) D  I $g(NOKILLER)="",$$DelFile^%ZAPM.ed.BSCEXE(FN)
 .S @TOBD@("Compile")="Begin "_$$TD^%ZAPM.ed.BSC4base
 .K ErroR
 .D LF(FN)
 .I $G(ErroR) S OK=$TR($G(ErroR(1),ErroR),$C(34)_"'","``")
 .E  S OK="OK "_$$TD^%ZAPM.ed.BSC4base
 .S @TOBD@("Compile")=OK,@TOBD@("LST")=$H_","_$G(BSLOGIN)
 .D SNX^%ZAPM.ed.BSChT1("S",$TR(TOBD,"@",""),"TABLE")
 Q "1 OK"
TITLE W !,"/***********************************************************************\"
 W !,"          File: ",FN
 W !,"        Author: Serge W. Mikhaylenko"
 W !,"          Date: ",$ZD($H,9)
 W !,"   Description: Tree-DataBase from %BS"
 W !,"         Above: This File is Generated by %BS+++Cache"
 W !,"\***********************************************************************/",!!
 Q
SUPER W !,"description = {",!,$P(@TOBD,"@",1),!,"}",!
 W !,"   super = %Library.Persistent,%Library.Populate;",!
 W !,"persistent = BD;"
 W !,"index i1 { attributes = " D  W "; extent = 0; idkey; primarykey = 0; unique = 0; }",!
 .S S="",SUBK=0
 .F I=0:1:9 I $D(K(I)) S SUBK=SUBK+1,S=S_$$nk(I,"K"_SUBK)_","
 .W $E(S,1,$L(S)-1)
 Q
tra(S) Q $TR(S,$C(34)_"'","``")
nk(n,a) i $p(K(n),"@",22)'="" q $p(K(n),"@",22)
 e  q a
KEYS S SUBK=0
 F I=0:1:9 I $D(K(I)) D
 .S SUBK=SUBK+1
 .W !,"attribute "_$$nk(I,"K"_SUBK)," { type = %String(MAXLEN=""""); calculated = 0; description = ""Индексный ключ номер "_I_". Описан как :"
 .I $P(K(I),"@",17)'="" W $$tra($P(K(I),"@",17))_""";"
 .E  W $$tra($P(K(I),"@",15))_""";"
 .W " not final; multidimensional = 0; public; required; sqlcomputed = 0; transient = 0; }"
 w ! F I=1:1 Q:'$D(@TOBD@(I))  F J=1:1 Q:'$D(@TOBD@(I,J))  I $P(@TOBD@(I,J),"@",9)=2 D
 .I $P($P(@TOBD@(I,J),"@",18),"#")'="" S nynx=$P($P(^(J),"@",18),"#"),S=$TR(nynx,",ЁЙЦУКЕНГШЩЗХЪЭЖДЛОРПАВЫФЯЧСМИТЬБЮ","xQQWERTYUIOPPPPPLKJHGFDSAZXCVBNMMM"),S=$$Px(S)
 .E  S nynx=I_","_J,S="Px"_I_"x"_J
 .S P(S)=nynx W !,"  attribute "_S_" { type = %Library.String(MAXLEN=""""); calculated = 0; "
 .W "description = {",!
 .I $P(@TOBD@(I,J),"@",17)'="" W $$tra($P(@TOBD@(I,J),"@",17)),!
 .E  W "Показатель хранимый в базе данных. В таблице описания базы данных лежит в строке "_I_" колонке "_J_".",!
 .W "} "
 .W " not final; multidimensional = 0; public; not required; sqlcomputed = 0; transient = 0; }",!
 Q
Px(P) I $G(NOqListBD) Q "P"_$S($L(P)=1:"00",$L(P)=2:"0",1:"")_P
	I $E(P,1)?1N Q "Px"_P
 Q $G(PxPUSTO,"Px")_P
METOD(NM,N,code)
 W !!,"   method "_NM
 W !,"   {"
 W !,"   returntype = %Library.String;"
 W !,"   classmethod;"
 W !,"   not final;"
 W !,"   public;"
 W !,"   sqlproc = 0;"
 W !,"   code ="
 W !,"   ["
 I $D(code) W !,"     "_code
 E  S M="" F  S M=$O(@TOBD@("Metod",N,M)) Q:M=""  W !,"    "_$G(@TOBD@("Metod",N,M))
 W !,"   ]"
 W !,"   }",!
 Q
QUERY S S=""
 W !,"   query ListBD((Param1:%Library.String))"
 W !,"   {"
 W !,"           type = %Library.SQLQuery(CONTAINID=0,ROWSPEC=""" D  W """);"
 .;K1:%String,K2:%String,P1:%String,P2:%String,P3:%Library.String,P4:%Library.String
 .S SUBK=0
 .F I=0:1:9 I $D(K(I)) S SUBK=SUBK+1 W $$nk(I,"K"_SUBK)_":%String," S S=S_$$nk(I,"K"_SUBK)_", "
 .S J="",SS="" F  S J=$O(P(J)) Q:J=""  S SS=SS_J_":%String,",S=S_J_", "
 .W $E(SS,1,$L(SS)-1)
 W !,"           sqlquery ="
 W !,"           ["
 W !,"                   :SELECT "_$E(S,1,$L(S)-2)
 W !,"                   :FROM "_$P(NC,".",$L(NC,"."))
 I $D(K(1)) W !,"                   :WHERE ("_$$nk(1,"K1")_" = :Param1)"
 I $D(K(2)) W !,"                   :ORDER BY "_$$nk(2,"K2")
 W !,"            ]"
 W !,"            sqlproc = 0;"
 W !,"            sqlview = 0;"
 W !,"   }",! Q
STORAGE ;
 W !!,"       storage BD"
 W !,"       {"
 W !,"               description = ""Конструкция SQL доступа к базам данных %BS"";"
 W !,"               type = %CacheSQLStorage;"
 W !,"               sql"
 W !,"               {"
 W !,"                       map Master"
 W !,"                       {"
         W !,"                               type = data;"
 I $D(K(0)) D  ;ЕСТЬ ИМЕННОЙ КЛЮЧ
 .W !,"                               structure = list;"
 .W !,"                               global = ^*;"
 E  W !,"                               global = "_BD_";"
 W !
 S SUBK=0
 I $D(K(0)) D
 .S SUBK=1
    .W !,"       subscript 1 {"
    .W !,"        accesstype = global;"
    .W !,"        nextcode = ["
 .W !,"         I {L1}="""" S {L1}="_$$BD34
    .W !,"         S {L1}=""^""_{L1}"
    .W !,"         S {L1}=$O(^$GLOBAL({L1}))"
    .W !,"         S {L1}=$E({L1},2,$L({L1}))"
    .W !,"         I $E({L1},1,$L("_$$BD34_"))'="_$$BD34_" S {L1}="""""
 .W !,"            Q"
    .W !,"         ]"
    .W !,"         expression = "_$$BD34_"_{K1}; "
    .W !,"        }"
 F I=1:1:9 I $D(K(I)) D
 .S SUBK=SUBK+1
 .W !,"       subscript "_SUBK_"   { expression = {"_$$nk(I,"K"_SUBK)_"}; accesstype = sub; }"
 S J="" F  S J=$O(P(J)) Q:J=""  D
 .W !,"                           data "_J_" { node = """_P(J)_"""; }"
 S SUBK=0
 I $D(K(0)) S SUBK=1 W !,"   rowidspec 1 { field = K1; expression=$E({L1},$L("_$$BD34_")+1,$L({L1})); }"
         F I=1:1:9 I $D(K(I)) D
         .S SUBK=SUBK+1
         .W !,"   rowidspec "_SUBK_" { field = "_$$nk(I,"K"_SUBK)_"; expression={L"_SUBK_"}; }"
 W !,"                       }" ;MAP
 W !,"               }" ;SQL
 W !,"       }"
 Q
BD34() ;Q $C(34)_$E($$TR^%ZAPM.ed.BSsFUNM(BD,$C(34),$C(34,34)),2,999)_$C(34)
 N B1
 S B1=BD I BD["]" S B1="^"_$P(BD,"]",2,999)
 Q $C(34)_$E(B1,2,999)_$C(34)
NextNameBD(B) ;ПОКА НЕ ИСПОЛЬЗУЕТСЯ
 N NBD,NS,us,BD1
 S NBD=B
 I B["^[""" D
 .S NS=$ZU(5)
 .S us=$P(B,$C(34),2) I us'=$ZU(5) I $$ZU^%ZAPM.ed.BSF4(us)
 .S BD1="^"_$P(B,"]",2,9) S NBD=$O(^$GLOBAL(BD1))
 .I $ZU(5)'=NS,$$ZU^%ZAPM.ed.BSF4(NS)
 I B'["^[""" S NBD=$O(^$GLOBAL(B))
 Q NBD
Tab2TOBD(DSN,USER,PASS,NAME,TOBD) ;СТРУКТУРУ ТАБЛИЦЫ В ТАБЛИЦУ %BS
 N WEBSQL,I,II,flag
 D TABLE2T^%ZAPM.ed.BSCRG(DSN,NAME,TOBD,USER,PASS)
 I '$D(@TOBD) S ErroR=" Произошла ошибка импорта таблицы " W !,ErroR q
 D TA2BD^%ZAPM.ed.BSCRG($QS(TOBD,0),$QS(TOBD,1))
 I $P($G(@TOBD),"@",17)'=2 S ErroR=" Произошла ошибка импорта таблицы %BS " W ErroR,! q
 Q
JTB2TOBD(DSN,USER,PASS,NAME,TOBD) ;ТАБЛИЦУ %BS + КОМПИЛИРВАТЬ + ДАННЫЕ
 S PxPUSTO="" D START(TOBD,1) I $G(ErroR)>0 W !," Произошла ошибка компиляции ",! zw ErroR q
 D TAB2BSD^%ZAPM.ed.BSCRG(DSN,USER,PASS,NAME,$QS(TOBD,0),$QS(TOBD,1))
 Q
Stream(DSN,USER,PASS,part,NOKILLER) ;потоковая закачка всего DSN в Cache
 N (DSN,USER,PASS,part,NOKILLER) ;NOKILLER=путь к временной директории в которой CDL не удаляются (для отладки)
 d Stream1(DSN,USER,PASS,part)
 d Stream2(DSN,USER,PASS,part)
 q
Stream1(DSN,USER,PASS,part) ;закачка структуры DSN в раздел BS
 i $g(part)="" s part="^"_DSN
 D DSN2PART^%ZAPM.ed.BSCRG(DSN,part,$G(USER),$G(PASS)) I $G(ErV) W !,"Произошла ошибка доступа до DSN:"_DSN_" ",! zw ErV q
 q
Stream2(DSN,USER,PASS,part) ;закачка данных из таблиц DSN в таблицы BS
 D PART2BSD^%ZAPM.ed.BSCRG(part) i $G(Errors) W !," Произошла ошибка конвертации таблиц ",! q
 S PxPUSTO="" D ALLPART(part)
 I $G(ErroR)>0 W !," Произошла ошибка компиляции ",! zw ErroR q
 D DSN2BS^%ZAPM.ed.BSCRG(DSN,$G(USER),$G(PASS),part)
 W !,"Ok",!!     Q
 /////////////////////////////////////
MSETSQL(TD)
	I '$D(@TD) Q "0 ПУСТАЯ "_TD
	N GC,GD,PxPUSTO,NOKILLER,NOqListBD,IDU,%code
	S IDU=$$2LAT^%ZAPM.ed.BSCp($G(%BS(12),$G(BSLOGIN)))_"x"
	S GC=$NA(@("^CacheTempSQL")@(IDU))
	S GD="^CacheTempSQL."_IDU K @GD	M @GD=@TD 
	I $D(@GC) Q "1 @CacheTempSQL."_IDU
	M @GC=^%ZAPM.ed.BSC4("SQL")	S @GC@("KEY")=GD 
	S PxPUSTO="" ;,NOKILLER=1 ;НЕ УДАЛЯТЬ ФАЙЛ CDL
	S NOqListBD=1 ;НЕ СОЗДАВТЬ ЗАПРОС И ИМЕНА ПОЛЕЙ НОРМАЛИЗОВАТЬ
	S OK=$$START^%ZAPM.ed.BSCBD(GC,1) I $E(OK)="0" K @GD,@GC
	Q OK_" @CacheTempSQL."_IDU
 
MSETSQL1   S BSR="^CacheTempSQL",BST="SQL1" D ^%ZAPM.ed.BST
	Q
