ROUTINE %ZAPM.ed.a
#Include %ZAPM.ext.Common

a ;agregation
 /*
  d Exports^%ZAPM.ed.a("d:\_proj\_zapp\zpm-addition+\zapm-")
 	if $p(cmd," ")="edn" do ns^%ZAPM.ed.a quit $$$OK
	if $p(cmd," ")="edg" do ^%ZAPM.ed.BSMSMG($p(cmd," ",2)) quit $$$OK
	if $p(cmd," ")="edr" do ^%ZAPM.ed.BSXprog($p(cmd," ",2)) quit $$$OK
	if $p(cmd," ")="edf" ;;;do ^%ZAPM.ed.BSX($p(cmd," ",2)) quit $$$OK ;file system
	 write ##class(%Device).GetMnemonicRoutine()
 */
 // d ns^%ZAPM.ed.a
nszpm  ;Navigator for namespace and zpm modules --------------------------------- edz
 do resizeTerm
 new
 set $ztrap="error"
 do ClearCurrJobs
 D CLr^%ZAPM.ed.BSF4,CCC^%ZAPM.ed.BSC
 S %BS(12)="m",%BS(39)="NAV"
 S NSPL=$$NS^%ZAPM.ed.BSCp()  //get list namespace
 I NSPL=""  D ErrMsg^%ZAPM.ed.BSXfun("No namespaces available !") G exit
 do TabNew("NameSpace",$na(^%ZAPM.ed.BSS("ALINS")),$zts)
 S $P(@BSR@(BST,1,1),"@",15)=" ZPM modules in "_$ZU(110),
   $P(@BSR@(BST,1,2),"@",15)=$ZV,
   $P(@BSR@(BST,2,1),"@",15)=" ..",
   $P(@BSR@(BST,2,2),"@",15)=" ...Exit - <Esc>"
 ;S $P(@BSR@(BST),"@",12)=2  // status info 2=full,1,""
 S $P(@BSR@(BST),"@",15)=0,  // off F-keys 
   $P(@BSR@(BST),"@",19)="2,2", //freeze colomn and rows table
   $P(@BSR@(BST),"@",16)=1  // blocked F-keys
 ;S $P(@BSR@(BST),"@",41)="FKEY^%ZAPM.ed.BSC"  
 ;S $P(@BSR@(BST),"@",39)="^%ZAPM.ed.BSC,ZHELP1" //help text
 kill tab
 Set currentns=$Namespace
 Do ##class(%ZPM.PackageManager).GetListNamespace(.namespace)
  Set ns="",num=0
	For { set ns=$Order(namespace(ns)) Quit:ns=""
		Set $Namespace=ns
		Kill list
		set name=""
		Do ##class(%ZPM.PackageManager).GetListModules("",.list)
		If $D(list) {
			Set module="",write=0
			For { set module=$Order(list(module)) Quit:module=""
				I $i(tab)
				if name'=ns set tab(tab,1)=ns, name=ns
				else  set tab(tab,1)=""
				set tab(tab,1,0)=$lb(ns,module,list(module))
				set tab(tab,2)=module_" "_$LG(list(module),1)_" "_$Listget(list(module),2)
				set tab(tab,2,0)=$lb(ns,module,list(module))
				}
			} Else {
				if $i(tab)
				set tab(tab,1)=ns
				set tab(tab,2)=""
				set tab(tab,1,0)=$lb(ns)
				set tab(tab,2,0)=$lb(ns)
			}
		}
  do InsertTab(BSR,BST,.tab,2,0)
  ;D TAB^%ZAPM.ed.BSF1
  ;D Table^%ZAPM.ed.BSN(BSR,BST)   ;возвращает  YES, где      YES=1@2@3@4@5@6@7@8@9    - статус выхода из таблицы          
                ; 1=Y,X - номер клетки                                         
                ; 7 - координата клетки по строке                              
                ; 8 - координата клетки по колонке                             
                ; 4,5,6 - скан коды                                            
                ; 9 - данные лежащие в этой клетке   
 D TAB^%ZAPM.ed.BSF1 d ^%ZAPM.ed.BST 
ns1 ;set R1=$P(YES,"@",4),R2=$P(YES,"@",5),R3=$P(YES,"@",6)
 ;set ny=$P(YES,"@",7)
 I R1=27,R2=-1 G exit
 I ny=2 G exit
 I $G(R1)=13,$G(R2)=-1 D mode(@BSR@(BST,ny,nx)) d STA^%ZAPM.ed.BST  G ns1
 Q
TabNew(name="",from,suff="")
  Set BSR="^%ZAPM.ed.BSbufB",
 	BST=name_"Job"_$J_"u"_$g(%BS(15))_$tr(suff,".,")
 Kill @BSR@(BST)
 merge @BSR@(BST)=@from
 D CCC^%ZAPM.ed.BSC
 quit
InsertTab(p,t,tab,fromY,fromX=0,template="2,2") 
  new ny,nx,y,x,xx,yy,temp
  ;zw tab r r
  ;set ny=$p(@p@(t),"@",28),  	nx=$p(@p@(t),"@",29)
  set temp=$GET(@p@(t,$p(template,","),$p(template,",",2)))
  set y=""
  for { set y=$o(tab(y)) quit:y=""
  	set yy=fromY+y
  	set x=""
  	for { set x=$o(tab(y,x),1,data) quit:x=""
  		set xx=fromX+x
  		set @p@(t,yy,xx)=@p@(t,fromY,x)
  		set $p(@p@(t,yy,xx),"@",15)=data
  		set $p(@p@(t,yy,xx),"@",42)=$G(tab(y,x,0)) ;7
  	}
  }
  	
 quit
mode(cell) ;List zpm modules
	set list=$p(cell,"@",42)
 	set NAMESP=$lg(list,1)
 	zn NAMESP
 new BSR,BST
  do TabNew("GlobaList",$na(^%ZAPM.ed.BSS("ALINS")),NAMESP_$zts)
 if '$d(Moduls(NAMESP)) do ##class(%ZAPM.ext.zpm).GetListModule(,.Mod,0) merge Moduls(NAMESP)=Mod
 if $lg(list,3)'="" {
	 set module=$lg(list,2)
	 set ver=$lg($lg(list,3),1)
	 set desc=$lg($lg(list,3),2)
 }
 else {
 	 set module=""
	 set ver=""
	 set desc=""
 }
 d AddDataCell(1," "_NAMESP_" "_$g(module)_" "_$g(ver)," "_$g(desc))
 d AddDataCell(2," Routine Editor"," ...")
 d CloneRow(3,2)
 d AddDataCell(3," Global Editor"," ...")

 if module'="" {
	 set root=$lg($g(Moduls(NAMESP,module,"L")),3)
	 d CloneRow(4,2)
	 d AddDataCell(4," Module Root",root)
	 d AddDataCellInfo42(4,2,$lb(root))
	 if root'="" {
		 set num=4
		 kill DirList
		 d GetList^%ZAPM.ed.a(root,"*.*",.DirList)
		 set dir=""
		 for { set dir=$o(DirList(dir)) quit:dir=""
			 set file=$g(DirList(dir,"ItemName"))
			 set filename=$g(DirList(dir,"Name"))
			 if $g(DirList(dir,"Type"))="D" continue
			 if '$$isExtEnable(filename) continue
			 set num=num+1
			 d CloneRow(num,2)
			 d AddDataCell(num,"",file)
			 d AddDataCellInfo42(num,2,$lb(filename))
		 }
	 }
 }
 else {
	 d RemoveRow(4)
 }
 ;S $P(@BSR@(BST),"@",15)="INTGLO^%ZAPM.ed.BSC",  //spezific F-keys
  set $P(@BSR@(BST),"@",19)="2,2",  
   	$P(@BSR@(BST),"@",16)=1
 S $P(@BSR@(BST),"@",15)=0
 ;S $P(@BSR@(BST),"@",41)="FKEYPART^%ZAPM.ed.BSC"
 ;S $P(@BSR@(BST),"@",39)="^%ZAPM.ed.BSC,ZHELP2"
 D TAB^%ZAPM.ed.BSF1,^%ZAPM.ed.BST 
remode2 I R1=27,R2=-1 Q  //exit - esc
 if ny=2 d rou("")  d STA^%ZAPM.ed.BST  G remode2
 if ny=3 d glo("")  d STA^%ZAPM.ed.BST  G remode2
 if ny=4 do FileNavigator($lg($p(@BSR@(BST,ny,2),"@",42),1)) d STA^%ZAPM.ed.BST  G remode2
 set filename=$lg($p(@BSR@(BST,ny,2),"@",42),1)
 if filename'="" do fileView(filename) d STA^%ZAPM.ed.BST  G remode2
  g remode2
CloneRow(ny,from)
 set @BSR@(BST,ny,1)=@BSR@(BST,from,1)
 set @BSR@(BST,ny,2)=@BSR@(BST,from,2)
 q
AddDataCell(ny,d1="",d2="")
 S $P(@BSR@(BST,ny,1),"@",15)=d1
 set $P(@BSR@(BST,ny,2),"@",15)=d2
 q
AddDataCellInfo42(ny,nx,list)
 set $P(@BSR@(BST,ny,nx),"@",42)=list
 quit
RemoveRow(ny)
 new i
 for i=ny:1 quit:'$d(@BSR@(BST,i))  KILL @BSR@(BST,i)
 quit
error D ErrMsg^%ZAPM.ed.BSXfun("Error: "_$ze) 
 do clear
 quit
exit d clear write #
 quit
ClearCurrJobs
 new i
 set i=""
 for {set i=$o(^%ZAPM.ed.BSbufB(i)) quit:i=""
 	set job=$p($p(i,"Job",2),"u",1)
 	if job=$j Kill ^%ZAPM.ed.BSbufB(i)
 }
 quit
 // --------------------------------------- edfv
fileView(file) new (file)
 if '$$isExtEnable(file,.msg) D ErrMsg^%ZAPM.ed.BSXfun("Error load: "_$GET(msg)) quit
 D DOSTXT^%ZAPM.ed.BSDOS2(file)
 quit
 // --------------------------------------- edfc
fileCat(file) new (file)
 write !,file
 ;todo
 quit
 // --------------------------------------- edf
FileSys(filedir) 
 if filedir="mess" {
	 set filedir=##class(%File).NormalizeFilename("messages.log",##class(%File).GetDirectory($p($zu(86),"*"))_"mgr")
 }
 elseif filedir="cpf" {
	 set filedir=$p($zu(86),"*")
 }
 elseif filedir="" {
	 set parent=##class(%File).GetDirectory()
	 do FileNavigator(parent)
	 quit
 }
 
 set flag=$zu(140,1,filedir)
 if flag=-2 D ErrMsg^%ZAPM.ed.BSXfun("file is not exist "_filedir) quit  //not exist
 set slash=$s($zversion(1)=3:"/",1:"\")
 if flag>0,$e(filedir,*)=slash {  //dir
	do FileNavigator(filedir)
 }
 elseif flag>0 { //file
	do fileView(filedir)
 }
 
 quit
 // write $$isExtEnable^%ZAPM.ed.a("/opt2/isc/iris/mgr/messages.log",.msg)
isExtEnable(file,msg) new ext,size
 set slash=$s($zversion(1)=3:"/",1:"\")
 set ext=$p(file,slash,*)
 if ext'["." set ext=""
 else  set ext=$p(file,".",*)   
 if ext'="",'$lf($lb("dockerignore","gitattributes","gitignore","script","txt","md","json","yml","xml","sh","cls","mac","inc","csv","ini","html","cpf","log","key"),ext) set msg="forbidden extension format '"_ext_"'" quit 0
 set size=$zu(140,1,file)
 if size>2500000 set msg="the file is too big" quit 0
 quit 1
 // // --------------------------------------- edf
FileNavigatorErr
 if $ze["<zexit" 
 else  D ErrMsg^%ZAPM.ed.BSXfun($ze)
 g exit
 quit
FileNavigator(filedir)
 do ClearCurrJobs
 set $zt="FileNavigatorErr"
 ;do FileSysDir(filedir)
 quit
FileSysDir(filedir)
 new BSR,BST,DirList,sort
 do TabNew("FileSys",$na(^%ZAPM.ed.BSVOL("FileSys")),$zts)
  do AddDataCell(1,"   ",filedir)
 set msgexit=""
 if filedir'["\",filedir'["/" set msgexit=" - Exit"
 d AddDataCell(2,"   ","/.."_msgexit)
 d AddDataCellInfo42(2,2,$lb(filedir))
  set num=2
  kill DirList,sort
  d GetList^%ZAPM.ed.a(filedir,"*.*",.DirList)
  set dir=""
   for { set dir=$o(DirList(dir)) quit:dir=""
	 if $g(DirList(dir,"Type"))="D" set sort(1,dir)=""
	 else  set sort(2,dir)=""
   }
   set n=""
   for { set n=$o(sort(n)) quit:n=""
	 set dir=""
	 for { set dir=$o(sort(n,dir)) quit:dir=""
		 set num=num+1
		 set file=$g(DirList(dir,"ItemName"))
		 set filename=$g(DirList(dir,"Name"))
		 if $g(DirList(dir,"Type"))="D" set file="/"_file
		 else  set file=" "_file
		 d CloneRow(num,2)
		 d AddDataCell(num,"",file)
		 d AddDataCellInfo42(num,2,$lb(filedir,filename,$g(DirList(dir,"Type"))))
	 }
   }
 set $P(@BSR@(BST),"@",19)="2,2",  
   	$P(@BSR@(BST),"@",16)=1
 set $P(@BSR@(BST),"@",15)=0
 D TAB^%ZAPM.ed.BSF1,^%ZAPM.ed.BST 
FileSysDir2 
	I R1=27,R2=-1 goto exit
	set cell=$p(@BSR@(BST,ny,2),"@",42)
	try {
		set dir=$lg(cell,1)
		set filename=$lg(cell,2)
		set type=$lg(cell,3)
		set ext=$p(filename,".",*)
	}
	catch {
		do error goto exit
	}
	if ny=2 {
		if dir'["\",dir'["/" zt "exit"
		set dir=##class(%File).GetDirectory($e(dir,1,*-1))
		do FileSysDir(dir) d STA^%ZAPM.ed.BST  G FileSysDir2
	}
    if type="D" {
	    do FileSysDir(filename) d STA^%ZAPM.ed.BST  G FileSysDir2
    }
 	if filename'="" {
	 	if '$$isExtEnable(filename,.msg) D ErrMsg^%ZAPM.ed.BSXfun("Error load: "_$GET(msg)) g FileSysDir2
	 	do fileView(filename) d STA^%ZAPM.ed.BST  G FileSysDir2
 	}
  g FileSysDir2
 quit
  //zapm "edf d:\!\"
rou(name="") //--------------------------------------------------------- edr
 new %cmd,IYI,%BS,%W,%cmd,%zT,AF,AQUA,BBK,BK,BLUE,BR,CRLF,EF,Err,GG,GOLD,GREEN,HHH,I,II1,K1,LL,LOC,MAROON,P,Qu,R,R1,R2,R3,R4,R5,RED,Refresh,YES,g,g1,glo,i,r1,r2,r3,txt,zBS4cfg,zr,li,r,rr
 new BS,BSR,BST,BSr,BSt,e,MRMR,rou,%GO,%JB,Ask,Mouse,Ox,Oy,WA,WAI
 d resizeTerm
 do ^%ZAPM.ed.BSXprog(name)
 do exit
 quit
glo(name="") //--------------------------------------------------------- edg
 new %cmd,IYI,%BS,%W,%cmd,%zT,AF,AQUA,BBK,BK,BLUE,BR,CRLF,EF,Err,GG,GOLD,GREEN,HHH,I,II1,K1,LL,LOC,MAROON,P,Qu,R,R1,R2,R3,R4,R5,RED,Refresh,YES,g,g1,glo,i,r1,r2,r3,txt,zBS4cfg,zr,li,r,rr
 new BS,BSR,BST,BSr,BSt,e,MRMR,rou,%GO,%JB,Ask,Mouse,Ox,Oy,WA,WAI
 d resizeTerm
 do ^%ZAPM.ed.BSMSMG(name)
 do exit
 quit
 /// Get all files in a directory without subdirectories
 /// d GetList^%ZAPM.ed.a("D:\!\","*.*",.List)
GetList(directory, ext = "*.*", list)
	set:ext="*.*" ext=$s($zversion(1)=3:"*",1:"*.*")
	set st = 1
	try {
		set directory = ##class(%File).NormalizeDirectory(directory)
		set rs = ##class(%ResultSet).%New("%File:FileSet")
		s sc=rs.Execute(directory, ext)
		while (rs.Next()) {
			set fName = rs.Get("Name")
			m list(fName)=rs.Data
		}
	} catch ex {
		set st = ex.AsStatus()
	}
 quit st
 // set ls=$$LineEdit^%ZAPM.ed.a("input","edit string") write !,"result: ",ls,!,"YES: ",YES
 // ---------------------------------------------------------------- edit llne
LineEdit(str,msg)
 new (str,msg,YES)
 set value=str
 if $lv(str) set value=##class(%Global).Quote(str),ListValid=1
 set li=$$LineEdit^%ZAPM.ed.BSXfun(value,msg)
 if YES<1 do clear quit str
 set %1=li
 if $GET(ListValid) xecute "set %1="_li
 do clear
 quit %1
clear O 0:(:) write $$$escClear
 quit

getYXterminal()
 ;stty -a
 ;speed 38400 baud; rows 57; columns 193; line = 0;
 quit
 
resizeTerm(y=25,x=80)
 w $c(27),"[8;"_y_";"_x_";t"
 quit

 //  d keys2^%ZAPM.ed.a
keys2 write ##class(%Device).GetMnemonicRoutine()
 do FOR^%ZAPM.ed.BSCp
 O 0:(:) 
 quit
 
 // d keys1^%ZAPM.ed.a
keys1 write ##class(%Device).GetMnemonicRoutine()
 for  R *R1:999,*R2:0,*R3:0,*R4:0,*R5:0  w !,"==="_R1_" "_R2_" "_R3_" "_R4_" "_R5,! if R1=13 quit
  quit
r(R=999) ;O 0:(:"IS")
 R *R1:R,*R2:0,*R3:0,*R4:0,*R5:0  w !,"==="_R1_" "_R2_" "_R3_" "_R4_" "_R5,!
 ;O 0:(:) 
 q 1
 // colors template
CLR f i=1:1:15 w !,i," ",$$clr^%ZAPM.ed.BS3(i)," Тест ",$$clr^%ZAPM.ed.BS3(0)
  quit 
 ///z 
 /*
   ;The following table shows the $ZU(140) flags recognized by Cache:
 ;Flag Operation
 ;  1 Returns file size in bytes.
 ;  2 Returns modification date/time in $H format
 ;  3 Returns creation date/time in $H format
 ;  4 Tests whether the named file exists (returns 0 if yes)
 ;  5 Deletes the named file
 ;  6 Renames the file specified in name with the name specified in newname. May move the file
 ;      to a different location, if the host operating system supports it.
 ;  7 Returns file attributes as a bit map.
 ;  8 [unused]
 ;  9 Creates the directory specified in name.
 ;  10 Deletes the directory specified in name
 ;  11 - ???
 	12 - Доступность файла
  #; %mode=2 (write) or 4 (read)
#define SHDWEROPENFILE(%f,%mode) $s($zu(140,12,%f)<0:"no file",$zu(140,12,%f,%mode)<0:"no access",1:"misc error")

/// Return the free space available for journal files
ClassMethod GetFreeSpace() As %Integer
{
	s altdir=..GetAlternateDirectory()
	s info=$zu(140,13,altdir),free=$p(info,",")*$p(info,",",4)
	s curdir=..GetPrimaryDirectory() i curdir=altdir q free
	s info=$zu(140,13,curdir)
	q $p(info,",")*$p(info,",",4)+free
}
 $zu(140,13,curdir)= -3 не существует
 
 
 Вход в таблицу по ^NEW  S IYI="^PART(TAB" D NE^%ZAPM.ed.BSN         см 1.  
   c сохранением видео -    или                                             
    картинки               D Table^%ZAPM.ed.BSN(BSR,BST)   возвращает  YES, гд
                 YES=1@2@3@4@5@6@7@8@9    - статус выхода из таблицы          
                 1=Y,X - номер клетки                                         
                 7 - координата клетки по строке                              
                 8 - координата клетки по колонке                             
                 4,5,6 - скан коды                                            
                 9 - данные лежащие в этой клетке      

   Вход в таблицу  без      S BSR="^PART",BST="TAB"             см 1.         
   сохpанения видео         D ENTER^%ZAPM.ed.BSN                              
                                                                              
   Вывод сообщений об       S ls="ТЕКСТ ОШИБКИ" D O^%ZAPM.ed.BSF7  или        
   ошибке                   D ErrMsg^%ZAPM.ed.BSXfun("ТЕКСТ ОШИБКИ")          
                                                                              
   Вывод простого сообщения D OkMsg^%ZAPM.ed.BSXfun("ТЕКСТ")                  
                                                                              
   Меню  ДА/НЕТ             S ls="ВЫ УВЕРЕНЫ ?" D YES^%ZAPM.ed.BSF"      YES=1
                                                                              
   Сообщение о действии     S ls="ТЕКСТ" D WAITS^%ZAPM.ed.BSF2          X WA-с
                            D Wait^%ZAPM.ed.BSXfun("ТЕКСТ")                   
                                                                              
   Сообщение "ЖДИТЕ..."     WAIT^%ZAPM.ed.BSF2           
  Строковый редактор  S ls="Text"                                             
                       S li="строка"                        li-результат      
                       S ll="запрещенные символы"            YES=0 отмена     
                       D LE^%ZAPM.ed.BSS                                      
                              или                                             
                       S li=$$LineEdit^%ZAPM.ed.BSXfun("СТРОКА","ТЕКСТ")      
                                                                          
                                                                              
ВХОД В РЕДАКТОР ГЛОБАЛИ   D ^%ZAPM.ed.BSMSMG("^A(1,2,3)")                     
          ИЛИ ЛОКАЛИ      D ^%ZAPM.ed.BSMSMG("XXX")         
                  ER D ErrMsg^%ZAPM.ed.BSXfun($ZE_" "_$$ErrSay^%ZAPM.ed.BSF8($>

 D DOSTXT^%ZAPM.ed.BSDOS2("D:\InterSystems\IRIS\mgr\.modules\ZPMSHOW\zpmshow\1.0.2\README.md")

 */
 /// do FOR^%ZAPM.ed.BSCp - клавиши
 /// D INIT^%ZAPM.ed.BSChW ;ИНИЦИАЛИЗАЦИЯ КОМПЛЕКСА
 /// do ^%ZAPM.ed.BSC - Навигация по областям и глобалям
 /// do ^%ZAPM.ed.BSMSMG("^A(1,2,3)")	- Редактор глобалов
 /// ИЛИ ЛОКАЛИ      D ^%ZAPM.ed.BSMSMG("XXX")
 /// do ^%ZAPM.ed.BSXprog - Редактор программ
 /// do ErrMsg^%ZAPM.ed.BSXfun("Message - !!"_$ZE) - вывод текста об ошибке
 /// F  D READM^%ZAPM.ed.BSre W !
 ///
 /// d Exports^%ZAPM.ed.BSC("d:\_proj\_zapp\zpm-addition+\zapm-")
 ///
 /// d Exp2016^%ZAPM.ed.BSC("d:\_proj\_zapm\ENS2016\")
 /// 
 ;--------------------------------------------------------------------------------------------
getProcess(i,ff) ;@;sys-proj;получить свойства процесса для Cache' и вернуть их в массиве ff
 ;@@;^
 ;i - pid
 n pr s $zt="getProcessErr^bssys" 
 s pr=##class(%SYS.ProcessQuery).%OpenId(i)
 s ff(i,"Routine")=pr.Routine,ff(i,"NameSpace")=pr.NameSpace,ff(i,"GetCPUTime")=pr.GetCPUTime(),ff(i,"State")=pr.State
 s ff(i,"MemoryUsed")=pr.MemoryUsed,ff(i,"CurrentDevice")=pr.CurrentDevice,ff(i,"CanBeTerminated")=pr.CanBeTerminated
 s ff(i,"CanBeExamined")=pr.CanBeExamined,ff(i,"CanBeSuspended")=pr.CanBeSuspended,ff(i,"CanReceiveBroadcast")=pr.CanReceiveBroadcast
 s ff(i,"ClientExecutableName")=pr.ClientExecutableName,ff(i,"ClientIPAddress")=pr.ClientIPAddress,ff(i,"ClientNodeName")=pr.ClientNodeName
 s ff(i,"CSPSessionID")=pr.CSPSessionID,ff(i,"CurrentLineAndRoutine")=pr.CurrentLineAndRoutine,ff(i,"CurrentSrcLine")=pr.CurrentSrcLine
 s ff(i,"GlobalReferences")=pr.GlobalReferences,ff(i,"InTransaction")=pr.InTransaction,ff(i,"IsGhost")=pr.IsGhost,ff(i,"JobNumber")=pr.JobNumber
 s ff(i,"JobType")=pr.JobType,ff(i,"LastGlobalReference")=pr.LastGlobalReference,ff(i,"LicenseUserId")=pr.LicenseUserId,ff(i,"LinesExecuted")=pr.LinesExecuted
 s ff(i,"Location")=pr.Location,ff(i,"MemoryAllocated")=pr.MemoryAllocated,ff(i,"OpenDevices")=pr.OpenDevices,ff(i,"OSUserName")=pr.OSUserName
 s ff(i,"PidExternal")=pr.PidExternal,ff(i,"Priority")=pr.Priority,ff(i,"PrivateGlobalBlockCount")=pr.PrivateGlobalBlockCount,ff(i,"StartupClientIPAddress")=pr.StartupClientIPAddress
 s ff(i,"StartupClientNodeName")=pr.StartupClientNodeName,ff(i,"Switch10")=pr.Switch10,ff(i,"UserInfo")=pr.UserInfo,ff(i,"UserName")=pr.UserName
 k pr 
 q
getVarJob(pid,ff,VariableName,Format) ;@;sys-proj;получить переменные процесса
 ;@@;^
 ;pid - идентификатор процесса
 ; VariableName - Variable to return, or ""=All
 ;Format - Bit string of how to format the variable data, default = 0 (no formattimg)
 ;Bit 0 - Format the data with $c() and $lb() notation
 ;Bit 1 - Embed bolded cursor sequences around $c() and $lb() notation
 ;ff - массив по ссылке
 i $zv["GT.M" w "пока не знаю как" q
 i $zv["Cach" d  q
 .n %ROWCOUNT,pr,i,J,Rset
 .Set Rset=##class(%ResultSet).%New("%SYS.ProcessQuery:VariableByPid")
 .d Rset.Execute(pid,$g(VariableName),$g(Format,0))
 .;S COL=Rset.GetColumnCount() F J=1:1:COL w " "_Rset.GetColumnName(J) ;Name Value
 .f i=1:1 q:'Rset.Next()  i Rset.Data("Name")'="" s ff(Rset.Data("Name"))=Rset.Data("Value") ;w !,Rset.Data("Name")_"="_Rset.Data("Value")
 .d Rset.Close() k Rset
 q  


LockTab(ff) ;собрать Lock ссылки в массив ff со всеми их свойствами
 i $zv["GT.M" w "пока не знаю как" q
 i $zv["Cach" d  q
 .n %ROWCOUNT,pid,pr,i
 .Set Rset=##class(%ResultSet).%New("%SYS.LockQuery:Detail")
 .d Rset.Execute("")
 .;f  q:'Rset.Next()  s i=Rset.Data("LockString") i i'="" s ff(i,"DelKey")=Rset.Data("DelKey"),ff(i,"Owner")=Rset.Data("Owner"),ff(i,"Mode")=Rset.Data("Mode"),ff(i,"Flags")=Rset.Data("Flags"),ff(i,"Counts")=Rset.Data("Counts"),ff(i,"Sfn")=Rset.Data("Sfn"),ff(i,"LockString")=Rset.Data("LockString"),ff(i,"FullReference")=Rset.Data("FullReference"),ff(i,"WaiterPID")=Rset.Data("WaiterPID"),ff(i,"WaiterMode")=Rset.Data("WaiterMode"),ff(i,"WaiterType")=Rset.Data("WaiterType"),ff(i,"RemoteOwner")=Rset.Data("RemoteOwner")
 .f  q:'Rset.Next()  s i=Rset.Data("DelKey") i i'="" s ff(i,"DelKey")=Rset.Data("DelKey"),ff(i,"Owner")=Rset.Data("Owner"),ff(i,"Mode")=Rset.Data("Mode"),ff(i,"Flags")=Rset.Data("Flags"),ff(i,"Counts")=Rset.Data("Counts"),ff(i,"Sfn")=Rset.Data("Sfn"),ff(i,"LockString")=Rset.Data("LockString"),ff(i,"FullReference")=Rset.Data("FullReference"),ff(i,"WaiterPID")=Rset.Data("WaiterPID"),ff(i,"WaiterMode")=Rset.Data("WaiterMode"),ff(i,"WaiterType")=Rset.Data("WaiterType"),ff(i,"RemoteOwner")=Rset.Data("RemoteOwner")
 .d Rset.Close() k Rset,pid
 q  
LockTabDelKey(fr) ;удалить блокировку
 n ons,rc s ons=$zu(5) zn "%sys"
 set rc=##Class(SYS.Lock).DeleteOneLock(fr)
 zn ons
 q 
getProcessErr d be^bsg s $zt=$g(%zt)
 i $ze["INVALID OREF" w "<br>Процесс уже прекращен!" q  ;ZINVALID OREF
 w !,"ExecuteRoutineError: ",$$GetZE^bsfun(),!,$c(13,10) 
 q
 ;---------------------------------------------------------------------------
 
Exp2016(dir) // 
	set slash=$select($zversion(1)=3:"/",1:"\")
	s ed="editor"
	k list
	set dirpath=dir_"src"_slash_"xml"_slash
	s list("%ZAPM.ed.*.GBL")=""
	do $system.OBJ.Export(.list,dirpath_"_ZAPM.ed.gbl.xml","d",.err) 
	k list
	s list("%ZAPM.ed.*.MAC")=""
	do $system.OBJ.Export(.list,dirpath_"_ZAPM.ed.mac.xml","d",.err) 
	k list
	s list("%ZAPM.*.INC")=""
	do $system.OBJ.Export(.list,dirpath_"_ZAPM.ed.inc.xml","d",.err) 
 q
Exports(dir) // do Exports^%ZAPM.ed.a("d:\_proj\_zapp\zpm-addition+\zapm-")
	set slash=$select($zversion(1)=3:"/",1:"\")
	s ed="editor"
	do Exp(dir_ed_slash,,,"BSpg")
	;for d="globals,MSM","routine,BSXpr","text,BSX","table,BST" {
	;	s di=$p(d,",")
	;	s mask=$p(d,",",2)
	;	do Exp(dir_di_"-"_ed_slash,mask,0)
	;}
	;do Exp(dir_"tkweb"_slash,"pgWEB","pgWEB")
	;do Exp(dir_"tkimail"_slash,"pgWEM","pgWEM")
 q
Exp(dir,mask="",glomask="",isk="") ;d Exp^%ZAPM.ed.a("d:\_proj\_zapp\zpm-addition+\zapm-editor\")
	new $namespace
	set $namespace="%SYS"
	set slash=$select($zversion(1)=3:"/",1:"\")
	set dirpath=dir_"src"_slash_"mac"_slash_"_ZAPM"_slash_"ed"_slash
	s st=##class(%File).CreateDirectoryChain(dirpath)
	i 'st w !,st q
 	do ##class(%File).RemoveDirectoryTree(dirpath)
	;Rou
	set r=""
	for { set r=$O(^ROUTINE(r)) q:r=""  continue:r'["%ZAPM.ed."
		if mask'="",r'[mask continue 
		if isk'="",r[isk  continue
		set file=$tr(r,"%","_")_".mac"
		Set st = $System.OBJ.ExportUDL(r_".mac",dirpath_file,"-d")
		s rou(r_".mac")=""
		if 'st w !,st q
		else  w !,file
	}
	;Glo
	if 0,glomask'=0 {
		kill gl
		set dirpath=dir_"src"_slash_"gbl"_slash
		d GetGlobalDir^%ZAPM.ed.BSCp($namespace,.gl)
		s i=""
		for { s i=$o(gl(i)) q:i=""  continue:i'["%ZAPM.ed."
			if glomask'="",i'[glomask continue
			k list
			s list(i_".GBL")=""
			do $system.OBJ.Export(.list,dirpath_"_"_$e(i,2,*)_".xml","d",.err) 
		}
	}
	k list
	set dirpath=dir_"src"_slash_"gbl"_slash
	s list("%ZAPM.ed.BS.GBL")=""
	s list("%ZAPM.ed.BSC*.GBL")=""
	s list("%ZAPM.ed.BSD*.GBL")=""
	s list("%ZAPM.ed.BSE*.GBL")=""
	s list("%ZAPM.ed.BSG*.GBL")=""
	s list("%ZAPM.ed.BSH*.GBL")=""
	s list("%ZAPM.ed.BSR*.GBL")=""
	s list("%ZAPM.ed.BSS*.GBL")=""
	s list("%ZAPM.ed.BSV*.GBL")=""
	s list("%ZAPM.ed.BSX*.GBL")=""
	do $system.OBJ.Export(.list,dirpath_"_ZAPM.ed.xml","d",.err) 
	set dirpath=dir_"ed"_slash
	do $system.OBJ.Export(.list,dirpath_"_ZAPM.ed.gbl.xml","d",.err) 	

	set dirpath=dir_"ed"_slash
	do $system.OBJ.Export(.rou,dirpath_"_ZAPM.ed.mac.xml","d",.err) 
	zw err
	m list=rou
	do $system.OBJ.Export(.list,dirpath_"_ZAPM.ed.all.xml","d",.err) 
	zw err
 q
 // xec do DrawText^%ZAPM.ed.a("^%ZAPM.ed.BSHLP(""CtructG"")") ;документация по структкре таблицы
 // xec do DrawText^%ZAPM.ed.a("^%ZAPM.ed.BSHLP(""D"")") ;вся документация
DrawText(gn)
 w !,"<pre>"
  set g=gn
  set head=""
  for { set g=$q(@g) quit:g=""
  	quit:$qs(g,1)'[$qs(gn,1)
   	if head'=$qs(g,1) set head=$qs(g,1) write !,"<font color=red>"_@g_"</font>"
   	write !,@g ;,$c(13,10)
  }
 write !,"</pre>"
 quit
 
 ;d ^PERFMON 
 ;Fot INI
setversion
 do ##class(%ZAPM.ext.zpm).SetModuleVersion("zapm-editor","^%ZAPM.settings","1.0.0")
 quit
